///@category Settings
/*
This script contains most of the enums used in the engine.
It is automatically run at the start of the game.
*/
enum GAME_META_STATE
	{
	running,
	paused,
	saving_clip,
	paused_replay,
	}
	

enum GAME_STATE
	{
	startup,
	normal,
	ending,
	cutscene,
	}
enum PLAYER_STATE
	{
	idle,
	crouching,
	walking,
	walk_turnaround,
	dashing,
	running,
	run_turnaround,
	run_stop,
	
	jumpsquat,
	aerial,
	
	airdodging,
	wavelanding,
	rolling,
	shielding,
	shield_release,
	shield_break,
	parry_press,
	parry_stun,
	spot_dodging,
	
	hitlag,
	hitstun,
	tumble,
	helpless,
	magnetized,
	flinch,
	balloon,
	landing_lag,
	knockdown,
	getup,
	
	tech_rolling,
	teching,
	tech_wall_jump,
	
	ledge_snap,
	ledge_hang,
	ledge_getup,
	ledge_jump,
	ledge_roll,
	ledge_attack,
	ledge_tether,
	ledge_trump,
	wall_cling,
	wall_jump,
	
	knocked_out,
	star_ko,
	screen_ko,
	respawning,
	
	attacking,
	grabbing,
	grabbed,
	grab_release,
	
	lost,
	entrance,
	}
//When the player state is being run
enum PLAYER_STATE_PHASE
	{
	start,
	normal,
	stop,
	}
//Gameplay Inputs
enum INPUT
	{
	attack,
	special,
	jump,
	shield,
	grab,
	smash,
	taunt,
	pause,
	run,
	
	LENGTH,
	}
//Custom Control Inputs for the different device types 
//(The inputs that are also in the INPUT enum MUST be in the same order)
enum CC_INPUT_CONTROLLER
	{
	attack,
	special,
	jump,
	shield,
	grab,
	smash,
	taunt,
	pause,
	run,
	
	short_hop,
	LR,
	LL,
	LU,
	LD,
	RR,
	RL,
	RU,
	RD,
	
	LENGTH,
	}
//(The inputs that are also in the INPUT enum MUST be in the same order)
enum CC_INPUT_KEYBOARD
	{
	attack,
	special,
	jump,
	shield,
	grab,
	smash,
	taunt,
	pause,
	run,
	
	short_hop,
	LR,
	LL,
	LU,
	LD,
	RR,
	RL,
	RU,
	RD,
	
	LENGTH,
	}
//(The inputs that are also in the INPUT enum MUST be in the same order)
enum CC_INPUT_TOUCH
	{
	attack,
	special,
	jump,
	shield,
	grab,
	smash,
	taunt,
	pause,
	run,
	
	short_hop,
	LR,
	LL,
	LU,
	LD,
	RR,
	RL,
	RU,
	RD,
	
	LENGTH,
	}
//(Special Control Settings)
enum SCS
	{
	tap_jump,
	double_tap,
	smash_stick,
	short_hop_aerial,
	AB_smash,	
	auto_walk,
	switch_sticks,
	jumpsquat_attacks,
	
	LENGTH,
	}
//(Advanced Controller Settings)
enum ACS
	{
	maximum_l,
	speed_l,
	deadzone_l,
	rotate_l,
	invert_x_l,
	invert_y_l,
	
	maximum_r,
	speed_r,
	deadzone_r,
	rotate_r,
	invert_x_r,
	invert_y_r,
	
	LENGTH,
	}
//(Xbox layout)
enum CONTROLLER
	{
	A,
	B,
	X,
	Y,
	LB,
	RB,
	LT,
	RT,
	START,
	SELECT,
	DPAD_U,
	DPAD_D,
	DPAD_R,
	DPAD_L,
	}
//Control Stick Directions
enum DIR
	{
	//Cardinal
	right,
	left,
	up,
	down,
	//Axis
	horizontal,
	vertical,
	any,
	none,
	}
//Control Stick Motion Directions
enum DIR_M
	{
	any = 0,
	down_back = 1,
	down = 2,
	down_front = 3,
	back = 4,
	neutral = 5,
	front = 6,
	up_back = 7,
	up = 8,
	up_front = 9,
	}
//Hurtbox types
enum HURTBOX_TYPE
	{
	permanent, //Player hurtbox
	attack, //Temporary, only lasts during an attack
	shield, //For "perfect_shield_start" / "parry_shield" shield types
	}
//Hurtbox Invulnerability
enum INV
	{
	normal,
	invincible,
	superarmor,
	heavyarmor,
	shielding,
	powershielding,
	parry_press, //Rivals Parry
	parry_shield, //Ultimate Parry
	counter,
	deactivate,
	reflector,
	}
enum AIRDODGE_TYPE
	{
	momentum_stop, //Rivals
	momentum_keep, //Brawl
	accelerate, //Ultimate
	}
enum SHIELD_TYPE
	{
	perfect_shield_start, //Melee
	parry_shield, //Ultimate
	parry_press, //Rivals
	}
enum WALL_JUMP_TYPE
	{
	jump_press, //Rivals
	stick_flick, //Smash
	}
enum LEDGE_TYPE
	{
	hog, //Melee
	trump, //Ultimate
	mantle,
	}
enum HITSTUN_TYPE
	{
	damage_scaled,
	simple,
	previous,
	normal,
	}
enum KNOCKDOWN_TYPE
	{
	normal,
	slide,
	}
enum ITEM_SYSTEM_TYPE
	{
	standard,
	simplified,
	}
enum SHAPE
	{
	square = -1,
	circle = -2,
	rotation = -3,
	}
//Angle Flippers
enum FLIPPER
	{
	fixed,
	standard,
	from_player_center,
	toward_player_center,
	from_player_center_horizontal,
	toward_player_center_horizontal,
	from_hitbox_center,
	toward_hitbox_center,
	from_hitbox_center_horizontal,
	toward_hitbox_center_horizontal,
	sakurai,
	sakurai_reverse,
	autolink,
	autolink_center,
	}
//Special Attack Phases
enum PHASE
	{
	start = -1,
	parry_press = -2,
	detection = -3,
	counter = -4,
	}
//Simple Attack Presets
enum SIMPLE_ATTACK_PRESET
	{
	none,
	aerial,
	special,
	a_throw,
	pummel,
	}
//Background Layer Properties
enum BACK
	{
	sprite,
	x,
	y,
	scale,
	parallax_x,
	parallax_y,
	xspd,
	yspd,
	frame,
	length,
	absolute,
	imgspeed,
	script,
	}
enum PROFILE
	{
	name,
	custom_controls,
	autogenerated,
	favorite_colors,
	}
enum HIT_VFX
	{
	//Normal
	normal_weak,
	normal_medium,
	normal_strong,
	slash_weak,
	slash_medium,
	slash_strong,
	electric_weak,
	electric,
	magic,
	grab,
	explosion,
	splash,
	
	//Single effects
	shield,
	shield_projectile,
	spin,
	lines,
	emphasis,
	shine,
	
	//Custom
	custom, 
	
	//None
	none,
	}
enum HIT_RESTRICTION
	{
	none,
	grounded_only,
	aerial_only,
	combo_only,
	ledge_only,
	not_ledge,
	not_crouching,
	not_grabbed,
	not_launched,
	not_combo,
	cannot_hit_anything,
	}
enum CPU_TYPE
	{
	attack,
	idle,
	di_in,
	di_out,
	di_random,
	airdodge,
	shield_hold,
	shield_grab,
	shield_attack,
	parry_ult,
	input_test,
	
	LENGTH,
	}
enum PLAYER_DATA
	{
	character,
	color,
	device,
	device_type,
	profile,
	is_random,
	is_cpu,
	cpu_type,
	team,
	custom,
	}
enum SPECTATOR_DATA
	{
	device,
	device_type,
	custom,
	}
enum CLIENT_DATA
	{
	name,
	connection,
	location,
	client_type,
	custom,
	}
enum CHARACTER_DATA
	{
	name,
	script,
	win_render,
	css_zone,
	css_portrait,
	hud_portrait,
	palette_sprite,
	palette_data,
	palette_column_arrays,
	stock_sprite,
	music,
	texture_groups,
	cpu_script,
	}
enum STAGE_DATA
	{
	name,
	script,
	room,
	sprite,
	texture_groups,
	frame,
	}
//Player data for the win screen order
enum WIN_SCREEN_DATA
	{
	is_winner,
	player_number,
	player_name,
	character,
	color,
	team,
	}
//Control Stick Properties
enum CONTROL_STICK
	{
	xval,
	yval,
	spd,
	
	LENGTH,
	}
enum STICK_CHECK_TYPE
	{
	current,
	backwards,
	}
enum DEVICE
	{
	controller,
	keyboard,
	touch,
	none,
	}
enum CSS_PLAYER
	{
	player_id,
	device,
	device_type,
	character,
	color,
	profile,
	is_cpu,
	cpu_type,
	team,
	custom,
	}
enum UI_CURSOR
	{
	index,
	x,
	y,
	clicked,
	held_time,
	}
enum CSS_STATE
	{
	normal,
	match_settings,
	main_menu,
	}
enum CSS_PLAYER_WINDOW_STATE
	{
	select_character,
	select_profile,
	create_profile,
	controls,
	control_set,
	ready,
	}
enum RANDOM_MATCHMAKING_STATE
	{
	idle,
	connecting_to_server,
	waiting_for_match,
	canceling_match,
	getting_holepunch_data,
	holepunching,
	failed,
	}
enum PRIVATE_LOBBY_STATE
	{
	normal,
	match_settings,
	}
//Animation Properties
enum ANIMATION
	{
	_FLAG_,
	sprite,
	frame,
	speed,
	scale,
	angle,
	alpha,
	offsetx,
	offsety,
	loop,
	finish,
	}
//Collision Flags
enum FLAG
	{
	//Blocks
	block,
	solid,
	plat,
	slope,
	
	//Other
	ride,
	push,
	}
//How players bounce off slopes
enum SLOPE_TYPE
	{
	perpendicular_bounce,
	calculated_bounce,
	}
enum TECH_RESULT
	{
	success,
	slide,
	bounce,
	}
enum JOSTLE_TYPE
	{
	gradual,
	instant,
	}
enum PLATFORM_CHECK_TYPE
	{
	quick,
	precise,
	}
//Types of Dynamic Resources for dynamic_resource_count
enum DR 
	{
	grid,
	list,
	map,
	priority,
	queue,
	stack,
	buffer,
	surface,
	}
enum KNOCKBACK_FORMULA
	{
	standard,
	stronger,
	}
//Online modes
enum ONLINE_MODE
	{
	quickplay,
	private_lobby,
	none,
	}
//Item types
enum ITEM_TYPE
	{
	//Items that can be picked up
	melee,
	throwing,
	projectile,
	
	//Items that cannot be picked up
	hazard,
	
	//Unknown type
	none,
	
	LENGTH,
	}
//Item actions
enum ITEM_ACTION
	{
	picked_up,
	thrown,
	}
//Callback scripts
enum CALLBACK_SCRIPT
	{
	script,
	type,
	target,
	
	LENGTH,
	}
enum CALLBACK_TYPE
	{
	permanent,
	temporary,
	one_time,
	}
//Touch controls stick types
enum TOUCH_STICK_TYPE
	{
	absolute,
	relative,
	}
//Command Line Interface Colors
enum CLI_TYPE
	{
	general = $f940ff,
	gameplay = $fff940,
	player = $40ff69,
	online = $40b9ff,
	}
enum HUD_TYPE
	{
	normal,
	legacy,
	}
/* Copyright 2024 Springroll Games / Yosi */