function private_lobby_start()
	{
	engine().private_lobby_json = ggmr_lobby_members_save();
	engine().private_lobby_resume = true;
	
	gc_collect();
			
	//Set the player data and spectator data based on the lobby data
	profile_clean_auto();
	player_data_clear();
	spectator_data_clear();
	client_data_clear();
	var _local_type = GGMR_CLIENT_TYPE.player;
	for (var i = 0; i < ds_list_size(obj_ggmr_lobby.lobby_members); i++)
		{
		var _member = obj_ggmr_lobby.lobby_members[| i];
		var _location = _member[@ GGMR_LOBBY_MEMBER.location];
		var _device_id = -1;
		var _device = -1;
		var _device_type = DEVICE.none;
		var _profile = -1;
		var _player_type = _member[@ GGMR_LOBBY_MEMBER.client_type];
		switch (_player_type)
			{
			case GGMR_CLIENT_TYPE.player:
				if (_location == GGMR_LOCATION_TYPE.local)
					{
					_local_type = _player_type;
					_device_id = mis_devices_get_array()[@ mis_last_device_used];
					_device = mis_device_get(_device_id, MIS_DEVICE_PROPERTY.port_number);
					_device_type = mis_device_convert_to_game_device(mis_device_get(_device_id, MIS_DEVICE_PROPERTY.device_type));
					//Local profile - use the default profile if available
					var _index = profile_find(engine().online_default_name);
					if (profile_exists(_index))
						{
						_profile = _index;
						}
					else
						{
						engine().online_default_name = "";
						_profile = profile_create
							(
							_member[@ GGMR_LOBBY_MEMBER.name],
							custom_controls_create(),
							true,
							);
						}
					}
				else if (_location == GGMR_LOCATION_TYPE.remote)
					{
					//Always autogenerate a profile for remote players
					_profile = profile_create
						(
						_member[@ GGMR_LOBBY_MEMBER.name],
						custom_controls_create(),
						true,
						);
					}
					
				var _custom = 
					{
					device_id :		_device_id,
					connection :	_member[@ GGMR_LOBBY_MEMBER.connection],
					name :			_member[@ GGMR_LOBBY_MEMBER.name],
					location :		_member[@ GGMR_LOBBY_MEMBER.location],
					client_type :	_member[@ GGMR_LOBBY_MEMBER.client_type],
					ready :			false,
					};
					
				//Placeholder data (with an autogenerated profile)
				player_data_create
					(
					character_find("Random"), 
					1,
					_device,
					_device_type,
					_profile,
					false, 
					false,
					undefined, 
					obj_ggmr_lobby.lobby_custom_data.teams[@ i], 
					_custom,
					);
				client_data_create
					(
					_member[@ GGMR_LOBBY_MEMBER.name],
					_member[@ GGMR_LOBBY_MEMBER.connection], 
					_member[@ GGMR_LOBBY_MEMBER.location], 
					_member[@ GGMR_LOBBY_MEMBER.client_type],
					);
				break;
				
			case GGMR_CLIENT_TYPE.spectator:
				if (_location == GGMR_LOCATION_TYPE.local)
					{
					_local_type = _player_type;
					_device_id = mis_devices_get_array()[@ mis_last_device_used];
					_device = mis_device_get(_device_id, MIS_DEVICE_PROPERTY.port_number);
					_device_type = mis_device_convert_to_game_device(mis_device_get(_device_id, MIS_DEVICE_PROPERTY.device_type));
					}
					
				var _custom = 
					{
					device_id :		_device_id,
					connection :	_member[@ GGMR_LOBBY_MEMBER.connection],
					name :			_member[@ GGMR_LOBBY_MEMBER.name],
					location :		_member[@ GGMR_LOBBY_MEMBER.location],
					client_type :	_member[@ GGMR_LOBBY_MEMBER.client_type],
					ready :			false,
					};
					
				spectator_data_create
					(
					_device,
					_device_type,
					_custom,
					);
				client_data_create
					(
					_member[@ GGMR_LOBBY_MEMBER.name],
					_member[@ GGMR_LOBBY_MEMBER.connection], 
					_member[@ GGMR_LOBBY_MEMBER.location], 
					_member[@ GGMR_LOBBY_MEMBER.client_type],
					);
				break;
			}
		}
		
	//Make sure to renew the lobby code reservation!
	if (connect_code_reserved)
		{
		server_send_packet(obj_ggmr_net.net_socket, packet, "private_lobby_reserve", engine().online_connect_code);
		}
	
	//Go to the online CSS screen or the Spectator Wait Screen
	if (_local_type == GGMR_CLIENT_TYPE.player)
		{
		room_goto(rm_online_css);	
		}
	else
		{
		room_goto(rm_spectator_wait);
		}
	}
/* Copyright 2024 Springroll Games / Yosi */